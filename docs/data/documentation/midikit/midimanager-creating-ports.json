{"metadata":{"role":"collectionGroup","modules":[{"name":"MIDIKit"}],"title":"Creating Ports"},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"topicSections":[{"title":"MIDIManager Methods","identifiers":["doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager\/addInput(name:tag:uniqueID:receiver:)","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager\/addOutput(name:tag:uniqueID:)"]}],"seeAlsoSections":[{"title":"Manager","generated":true,"identifiers":["doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager-Creating-Connections","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager-Removing-Ports-and-Connections","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager-Receiving-Notifications","doc:\/\/MIDIKit\/documentation\/MIDIKit\/ObservableMIDIManager","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO-Combine-and-SwiftUI-Features"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager-Creating-Ports"},"abstract":[{"type":"text","text":"Virtual MIDI ports (endpoints) can be created in order to allow the user to send your app MIDI events or receive events that your app sends. These will appear in the system to other software as MIDI ports, similar to physical MIDI ports."}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"anchor":"iOS-App-Target-Entitlements","level":3,"type":"heading","text":"iOS App Target Entitlements"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the application targets iOS or Mac Catalyst, ensure the following entitlements are added to the build target."}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To allow the creation of virtual ports on iOS, add the "},{"inlineContent":[{"type":"text","text":"Background Modes"}],"type":"strong"},{"text":" entitlement and enable the ","type":"text"},{"inlineContent":[{"type":"text","text":"Audio, AirPlay and Picture in Picture"}],"type":"strong"},{"text":" mode.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"identifier":"background-modes-audio.png","type":"image"}]},{"text":"Virtual Inputs","type":"heading","anchor":"Virtual-Inputs","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"A virtual input port is created and owned by the "},{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","isActive":true,"type":"reference"},{"text":" and will be disposed from the system either when you call ","type":"text"},{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager\/remove(_:_:)","isActive":true,"type":"reference"},{"type":"text","text":" on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager"},{"type":"text","text":" or when the "},{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","type":"reference","isActive":true},{"text":" de-inits.","type":"text"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"MIDI events are received on a background thread managed by Core MIDI. If your code in the receive handler closure may result in UI updates, ensure that you dispatch it on the main thread, as demonstrated below."}]}],"name":"Note","type":"aside"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"By forwarding received events to a handler method (","type":"text"},{"code":"func received(midiEvent:)","type":"codeVoice"},{"text":" in this example), you can reuse the same handler method if you plan to use multiple ports or connections that you need to funnel to the same receive block. However for simple event handling, it could be handled entirely within the ","type":"text"},{"type":"codeVoice","code":"receiver:"},{"type":"text","text":" parameter closure."}]}],"name":"Tip","style":"tip"},{"syntax":"swift","type":"codeListing","code":["let inputTag = \"Virtual_MIDI_In\"","","try midiManager.addInput(","    name: \"MyApp MIDI In\",","    tag: inputTag,","    uniqueID: .userDefaultsManaged(key: inputTag),","    receiver: .events { [weak self] events in","        \/\/ Note: this handler will be called on a background thread so be","        \/\/ sure to call anything that may result in UI updates on the main thread","        DispatchQueue.main.async {","            events.forEach { self?.received(midiEvent: $0) }","        }","    }",")","","private func received(midiEvent: MIDIEvent) {","    switch midiEvent {","    case .noteOn(let payload):","        print(\"Note On:\", payload.note, payload.velocity, payload.channel)","    case .noteOff(let payload):","        print(\"Note Off:\", payload.note, payload.velocity, payload.channel)","    case .cc(let payload):","        print(\"CC:\", payload.controller, payload.value, payload.channel)","    case .programChange(let payload):","        print(\"Program Change:\", payload.program, payload.channel)","        ","    \/\/ etc...","","    default:","        break","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the "},{"type":"codeVoice","code":"uniqueID:"},{"text":" parameter It is best to use ","type":"text"},{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIIdentifierPersistence\/userDefaultsManaged(key:suite:)","type":"reference","isActive":true},{"text":" which automatically manages the endpoint’s Core MIDI identity and restores it each time the same virtual endpoint is created, which other applications rely on to uniquely identify your endpoint so that they can reconnect to it in future.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For simple and powerful event filtering API, see "},{"identifier":"https:\/\/orchetect.github.io\/MIDIKit\/documentation\/midikit\/midikitcore-event-filters","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"heading","text":"Virtual Outputs","level":2,"anchor":"Virtual-Outputs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A virtual output port is created and owned by the "},{"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","isActive":true},{"type":"text","text":" and will be disposed from the system either when you call "},{"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager\/remove(_:_:)","isActive":true},{"text":" or when the manager de-inits. No special clean-up is necessary.","type":"text"}]},{"type":"codeListing","code":["let outputTag = \"Virtual_MIDI_Out\"","","try midiManager.addOutput(","    name: \"MyApp MIDI Out\",","    tag: outputTag,","    uniqueID: .userDefaultsManaged(key: outputTag)",")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"For the ","type":"text"},{"type":"codeVoice","code":"uniqueID:"},{"type":"text","text":" parameter it is best to use "},{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIIdentifierPersistence\/userDefaultsManaged(key:suite:)","isActive":true,"type":"reference"},{"type":"text","text":" which automatically manages the endpoint’s Core MIDI identity and restores it each time the same virtual endpoint is created, which other applications rely on to uniquely identify your endpoint so that they can reconnect to it in future."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To send events, call the "},{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManagedSendsMessages\/send(event:)","isActive":true,"type":"reference"},{"type":"text","text":" method on the "},{"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager\/managedOutputs","isActive":true},{"type":"text","text":" dictionary in the "},{"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","isActive":true},{"type":"text","text":" instance."}]},{"type":"codeListing","syntax":"swift","code":["let output = midiManager.managedOutputs[outputTag]","try output?.send(event: .noteOn(60, velocity: .midi1(127), channel: 0x2))","try output?.send(event: .cc(11, value: .midi1(64), channel: 0x2))"]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/midikit\/midimanager-creating-ports"]}],"hierarchy":{"paths":[["doc:\/\/MIDIKit\/documentation\/MIDIKit","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO"]]},"kind":"article","references":{"doc://MIDIKit/documentation/MIDIKit/MIDIManager/remove(_:_:)":{"type":"topic","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager\/remove(_:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"remove","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"c:@M@MIDIKitIO@objc(cs)MIDIManager","text":"MIDIManager","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:9MIDIKitIO11MIDIManagerC11ManagedTypeO","text":"ManagedType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"c:@M@MIDIKitIO@objc(cs)MIDIManager","text":"MIDIManager","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:9MIDIKitIO11MIDIManagerC12TagSelectionO","text":"TagSelection","kind":"typeIdentifier"},{"kind":"text","text":")"}],"title":"remove(_:_:)","kind":"symbol","abstract":[{"type":"text","text":"Remove a managed MIDI endpoint or connection."}],"url":"\/documentation\/midikit\/midimanager\/remove(_:_:)","role":"symbol"},"doc://MIDIKit/documentation/MIDIKit/MIDIIdentifierPersistence/userDefaultsManaged(key:suite:)":{"type":"topic","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIIdentifierPersistence\/userDefaultsManaged(key:suite:)","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"userDefaultsManaged","kind":"identifier"},{"text":"(","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"suite","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"c:objc(cs)NSUserDefaults","text":"UserDefaults","kind":"typeIdentifier"},{"kind":"text","text":")"}],"title":"MIDIIdentifierPersistence.userDefaultsManaged(key:suite:)","url":"\/documentation\/midikit\/midiidentifierpersistence\/userdefaultsmanaged(key:suite:)","abstract":[{"type":"text","text":"Managed with UserDefaults backing (recommended)."},{"type":"text","text":" "},{"type":"text","text":"The MIDI endpoint’s unique ID is managed automatically and persistently stored in"},{"type":"text","text":" "},{"code":"UserDefaults","type":"codeVoice"},{"type":"text","text":". The "},{"type":"codeVoice","code":"standard"},{"type":"text","text":" suite is used by default unless specified."}],"kind":"symbol","role":"symbol"},"doc://MIDIKit/documentation/MIDIKit":{"kind":"symbol","type":"topic","url":"\/documentation\/midikit","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit","abstract":[{"type":"text","text":"MIDIKit umbrella import that includes all MIDIKit modules."}],"title":"MIDIKit","role":"collection"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager/addOutput(name:tag:uniqueID:)":{"type":"topic","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager\/addOutput(name:tag:uniqueID:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addOutput"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"name"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"tag"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"uniqueID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9MIDIKitIO25MIDIIdentifierPersistenceO","kind":"typeIdentifier","text":"MIDIIdentifierPersistence"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"title":"addOutput(name:tag:uniqueID:)","kind":"symbol","abstract":[{"type":"text","text":"Adds new a managed virtual output to the "},{"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager\/managedOutputs","isActive":true},{"type":"text","text":" dictionary of the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager"},{"type":"text","text":"."}],"url":"\/documentation\/midikit\/midimanager\/addoutput(name:tag:uniqueid:)","role":"symbol"},"doc://MIDIKit/documentation/MIDIKit/ObservableMIDIManager/observableDevices":{"abstract":[{"text":"MIDI devices in the system.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This is an observable implementation of "},{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager\/devices","isActive":true,"type":"reference"},{"type":"text","text":"."}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"observableDevices","kind":"identifier"},{"kind":"text","text":": "},{"text":"MIDIDevices","preciseIdentifier":"s:9MIDIKitIO11MIDIDevicesV","kind":"typeIdentifier"}],"title":"observableDevices","url":"\/documentation\/midikit\/observablemidimanager\/observabledevices","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/ObservableMIDIManager\/observableDevices"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager":{"kind":"symbol","abstract":[{"type":"text","text":"Central MIDI Port and Connection Manager and MIDI system data provider."}],"url":"\/documentation\/midikit\/midimanager","title":"MIDIManager","role":"symbol","navigatorTitle":[{"text":"MIDIManager","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MIDIManager"}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager/addInput(name:tag:uniqueID:receiver:)":{"abstract":[{"type":"text","text":"Adds a new managed virtual input to the "},{"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager\/managedInputs","isActive":true},{"text":" dictionary of the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","type":"reference"},{"type":"text","text":" and creates the MIDI port in the system."}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"addInput","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"name"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":", ","kind":"text"},{"text":"tag","kind":"externalParam"},{"kind":"text","text":": "},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"uniqueID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"MIDIIdentifierPersistence","preciseIdentifier":"s:9MIDIKitIO25MIDIIdentifierPersistenceO"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"receiver"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9MIDIKitIO12MIDIReceiverO","text":"MIDIReceiver"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"}],"title":"addInput(name:tag:uniqueID:receiver:)","url":"\/documentation\/midikit\/midimanager\/addinput(name:tag:uniqueid:receiver:)","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager\/addInput(name:tag:uniqueID:receiver:)"},"background-modes-audio.png":{"identifier":"background-modes-audio.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/background-modes-audio.png"}],"alt":"Background Modes"},"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO-Combine-and-SwiftUI-Features":{"role":"article","title":"Combine and SwiftUI Features","url":"\/documentation\/midikit\/midikitio-combine-and-swiftui-features","kind":"article","type":"topic","abstract":[{"text":"Certain objects and properties are observable.","type":"text"}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO-Combine-and-SwiftUI-Features"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager/managedOutputs":{"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/midikit\/midimanager\/managedoutputs","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"managedOutputs"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"MIDIOutput","kind":"typeIdentifier","preciseIdentifier":"s:9MIDIKitIO10MIDIOutputC"},{"text":"]","kind":"text"}],"abstract":[{"text":"Dictionary of virtual MIDI outputs managed by this instance.","type":"text"}],"title":"managedOutputs","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager\/managedOutputs"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager-Removing-Ports-and-Connections":{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager-Removing-Ports-and-Connections","kind":"article","url":"\/documentation\/midikit\/midimanager-removing-ports-and-connections","type":"topic","title":"Removing Ports and Connections","abstract":[],"role":"collectionGroup"},"doc://MIDIKit/documentation/MIDIKit/ObservableMIDIManager/observableEndpoints":{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/ObservableMIDIManager\/observableEndpoints","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"observableEndpoints"},{"kind":"text","text":": "},{"text":"MIDIEndpoints","kind":"typeIdentifier","preciseIdentifier":"s:9MIDIKitIO13MIDIEndpointsV"}],"kind":"symbol","url":"\/documentation\/midikit\/observablemidimanager\/observableendpoints","type":"topic","title":"observableEndpoints","abstract":[{"text":"MIDI input and output endpoints in the system.","type":"text"},{"text":" ","type":"text"},{"text":"This is an observable implementation of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager\/endpoints"},{"text":".","type":"text"}],"role":"symbol"},"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO":{"url":"\/documentation\/midikit\/midikitio","title":"MIDIKitIO","type":"topic","abstract":[{"text":"Core MIDI I\/O wrapper layer offering ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager"},{"type":"text","text":" class to create virtual ports and connect to existing ports in the system in order to send and receive MIDI events."}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO","role":"collectionGroup","kind":"article"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager-Creating-Connections":{"role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/midikit\/midimanager-creating-connections","abstract":[{"text":"Managed connections are smart MIDI connections owned and maintained by the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager"},{"text":". They form connections to one or more endpoints and automatically reconnect if the target endpoints disappear and reappear in the system.","type":"text"}],"title":"Creating Connections","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager-Creating-Connections"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager/managedInputs":{"role":"symbol","url":"\/documentation\/midikit\/midimanager\/managedinputs","title":"managedInputs","kind":"symbol","type":"topic","abstract":[{"text":"Dictionary of virtual MIDI inputs managed by this instance.","type":"text"}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"managedInputs","kind":"identifier"},{"kind":"text","text":": ["},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:9MIDIKitIO9MIDIInputC","kind":"typeIdentifier","text":"MIDIInput"},{"kind":"text","text":"]"}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager\/managedInputs"},"doc://MIDIKit/documentation/MIDIKit/MIDIManagedSendsMessages/send(event:)":{"role":"symbol","kind":"symbol","title":"send(event:)","url":"\/documentation\/midikit\/midimanagedsendsmessages\/send(event:)","type":"topic","required":true,"abstract":[{"type":"text","text":"Send a MIDI Event."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"text":"event","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11MIDIKitCore9MIDIEventO","kind":"typeIdentifier","text":"MIDIEvent"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManagedSendsMessages\/send(event:)"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager-Receiving-Notifications":{"role":"collectionGroup","url":"\/documentation\/midikit\/midimanager-receiving-notifications","title":"Receiving Notifications","kind":"article","type":"topic","abstract":[{"type":"text","text":"Specify a handler to receive Core MIDI system notifications."}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager-Receiving-Notifications"},"https://orchetect.github.io/MIDIKit/documentation/midikit/midikitcore-event-filters":{"titleInlineContent":[{"text":"Event Filters","type":"text"}],"title":"Event Filters","identifier":"https:\/\/orchetect.github.io\/MIDIKit\/documentation\/midikit\/midikitcore-event-filters","url":"https:\/\/orchetect.github.io\/MIDIKit\/documentation\/midikit\/midikitcore-event-filters","type":"link"},"doc://MIDIKit/documentation/MIDIKit/ObservableMIDIManager":{"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/midikit\/observablemidimanager","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableMIDIManager"}],"abstract":[{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","isActive":true,"type":"reference"},{"type":"text","text":" subclass that is observable in a SwiftUI or Combine context."},{"type":"text","text":" "},{"text":"Two new properties are available: ","type":"text"},{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/ObservableMIDIManager\/observableDevices","type":"reference","isActive":true},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/ObservableMIDIManager\/observableEndpoints"},{"type":"text","text":"."}],"title":"ObservableMIDIManager","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/ObservableMIDIManager","navigatorTitle":[{"text":"ObservableMIDIManager","kind":"identifier"}]}}}