{"hierarchy":{"paths":[["doc:\/\/MIDIKit\/documentation\/MIDIKit","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKit-Getting-Started"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"roleHeading":"Article","title":"Simple MIDI Listener Class Example","role":"article","modules":[{"name":"MIDIKit"}]},"kind":"article","abstract":[{"type":"text","text":"A barebones example of how to set up MIDIKit to receive MIDI events on a created virtual input."}],"sections":[],"identifier":{"url":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/Simple-MIDI-Listener-Class-Example","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/midikit\/simple-midi-listener-class-example"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"code":["import Foundation","import MIDIKitIO","","public class MIDIModule {","    private let midiManager = MIDIManager(","        clientName: \"MyAppMIDIModule\",","        model: \"MyApp\",","        manufacturer: \"MyCompany\")","    ","    let inputTag = \"Virtual_MIDI_In\"","","    public init() {","        do {","            try midiManager.start()","            ","            try midiManager.addInput(","                name: \"MyApp MIDI In\",","                tag: inputTag,","                uniqueID: .userDefaultsManaged(key: inputTag),","                receiver: .events { [weak self] events in","                    \/\/ Note: this handler will be called on a background thread so be","                    \/\/ sure to call anything that may result in UI updates on the main thread","                    DispatchQueue.main.async {","                        events.forEach { self?.received(midiEvent: $0) }","                    }","                }","            )","        } catch {","            print(\"MIDI Setup Error:\", error)","        }","    }","    ","    private func received(midiEvent: MIDIEvent) {","        switch midiEvent {","        case .noteOn(let payload):","            print(\"Note On:\", payload.note, payload.velocity, payload.channel)","        case .noteOff(let payload):","            print(\"Note Off:\", payload.note, payload.velocity, payload.channel)","        case .cc(let payload):","            print(\"CC:\", payload.controller, payload.value, payload.channel)","        case .programChange(let payload):","            print(\"Program Change:\", payload.program, payload.channel)","            ","        \/\/ etc...","            ","        default:","            break","        }","    }","}"],"syntax":"swift","type":"codeListing"}]}],"references":{"doc://MIDIKit/documentation/MIDIKit":{"kind":"symbol","type":"topic","url":"\/documentation\/midikit","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit","abstract":[{"type":"text","text":"MIDIKit umbrella import that includes all MIDIKit modules."}],"title":"MIDIKit","role":"collection"},"doc://MIDIKit/documentation/MIDIKit/MIDIKit-Getting-Started":{"type":"topic","url":"\/documentation\/midikit\/midikit-getting-started","kind":"article","role":"collectionGroup","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKit-Getting-Started","title":"Getting Started","abstract":[{"type":"text","text":"Welcome to MIDIKit!"}]}}}