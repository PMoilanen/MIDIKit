{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/Simple-MIDI-Listener-Class-Example"},"sections":[],"kind":"article","metadata":{"role":"article","modules":[{"name":"MIDIKit"}],"roleHeading":"Article","title":"Simple MIDI Listener Class Example"},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"codeListing","code":["import Foundation","import MIDIKitIO","","public class MIDIModule {","    private let midiManager = MIDIManager(","        clientName: \"MyAppMIDIModule\",","        model: \"MyApp\",","        manufacturer: \"MyCompany\")","    ","    let inputTag = \"Virtual_MIDI_In\"","","    public init() {","        do {","            try midiManager.start()","            ","            try midiManager.addInput(","                name: \"MyApp MIDI In\",","                tag: inputTag,","                uniqueID: .userDefaultsManaged(key: inputTag),","                receiver: .events { [weak self] events in","                    \/\/ Note: this handler will be called on a background thread so be","                    \/\/ sure to call anything that may result in UI updates on the main thread","                    DispatchQueue.main.async {","                        events.forEach { self?.received(midiEvent: $0) }","                    }","                }","            )","        } catch {","            print(\"MIDI Setup Error:\", error)","        }","    }","    ","    private func received(midiEvent: MIDIEvent) {","        switch midiEvent {","        case .noteOn(let payload):","            print(\"Note On:\", payload.note, payload.velocity, payload.channel)","        case .noteOff(let payload):","            print(\"Note Off:\", payload.note, payload.velocity, payload.channel)","        case .cc(let payload):","            print(\"CC:\", payload.controller, payload.value, payload.channel)","        case .programChange(let payload):","            print(\"Program Change:\", payload.program, payload.channel)","            ","        \/\/ etc...","            ","        default:","            break","        }","    }","}"],"syntax":"swift"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/MIDIKit\/documentation\/MIDIKit","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKit-Getting-Started"]]},"abstract":[{"type":"text","text":"A barebones example of how to set up MIDIKit to receive MIDI events on a created virtual input."}],"variants":[{"paths":["\/documentation\/midikit\/simple-midi-listener-class-example"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://MIDIKit/documentation/MIDIKit/MIDIKit-Getting-Started":{"url":"\/documentation\/midikit\/midikit-getting-started","type":"topic","kind":"article","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKit-Getting-Started","role":"collectionGroup","title":"Getting Started","abstract":[{"type":"text","text":"Welcome to MIDIKit!"}]},"doc://MIDIKit/documentation/MIDIKit":{"title":"MIDIKit","kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit","abstract":[{"text":"MIDIKit umbrella import that includes all MIDIKit modules.","type":"text"}],"url":"\/documentation\/midikit"}}}