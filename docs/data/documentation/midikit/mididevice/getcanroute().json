{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getCanRoute"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Donâ€™t set this property value on driver-owned devices."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/midikit\/mididevice\/getcanroute()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIDevice\/getCanRoute()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Get a Boolean value that indicates whether the device or entity can route messages to or from external MIDI devices."},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"kMIDIPropertyCanRoute"},{"type":"text","text":")"}],"kind":"symbol","metadata":{"role":"symbol","title":"getCanRoute()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getCanRoute"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"symbolKind":"method","externalID":"s:9MIDIKitIO12MIDIIOObjectPAAE11getCanRouteSbyF::SYNTHESIZED::s:9MIDIKitIO10MIDIDeviceV","extendedModule":"MIDIKitIO","modules":[{"name":"MIDIKit"}]},"hierarchy":{"paths":[["doc:\/\/MIDIKit\/documentation\/MIDIKit","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO-Devices","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIDevice","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIDevice\/MIDIIOObject-Implementations"]]},"references":{"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO-Devices":{"role":"collectionGroup","title":"Working with Devices","abstract":[{"type":"text","text":"Devices represent physical devices that contain entity(ies) which in turn contain endpoint(s)."}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO-Devices","kind":"article","type":"topic","url":"\/documentation\/midikit\/midikitio-devices"},"doc://MIDIKit/documentation/MIDIKit/MIDIDevice/getCanRoute()":{"role":"symbol","title":"getCanRoute()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getCanRoute"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Get a Boolean value that indicates whether the device or entity can route messages to or from external MIDI devices."},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"kMIDIPropertyCanRoute"},{"type":"text","text":")"}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIDevice\/getCanRoute()","kind":"symbol","type":"topic","url":"\/documentation\/midikit\/mididevice\/getcanroute()"},"doc://MIDIKit/documentation/MIDIKit/MIDIDevice":{"role":"symbol","title":"MIDIDevice","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MIDIDevice"}],"abstract":[{"type":"text","text":"A MIDI device, wrapping a Core MIDI "},{"type":"codeVoice","code":"MIDIDeviceRef"},{"type":"text","text":"."}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIDevice","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MIDIDevice"}],"url":"\/documentation\/midikit\/mididevice"},"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO":{"role":"collectionGroup","title":"MIDIKitIO","abstract":[{"type":"text","text":"Core MIDI I\/O wrapper layer offering "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager"},{"type":"text","text":" class to create virtual ports and connect to existing ports in the system in order to send and receive MIDI events."}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO","kind":"article","type":"topic","url":"\/documentation\/midikit\/midikitio"},"doc://MIDIKit/documentation/MIDIKit/MIDIDevice/MIDIIOObject-Implementations":{"role":"collectionGroup","title":"MIDIIOObject Implementations","abstract":[],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIDevice\/MIDIIOObject-Implementations","kind":"article","type":"topic","url":"\/documentation\/midikit\/mididevice\/midiioobject-implementations"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager":{"role":"symbol","title":"MIDIManager","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MIDIManager"}],"abstract":[{"type":"text","text":"Central MIDI Port and Connection Manager and MIDI system data provider."}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MIDIManager"}],"url":"\/documentation\/midikit\/midimanager"},"doc://MIDIKit/documentation/MIDIKit":{"role":"collection","title":"MIDIKit","abstract":[{"type":"text","text":"MIDIKit umbrella import that includes all MIDIKit modules."}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit","kind":"symbol","type":"topic","url":"\/documentation\/midikit"}}}