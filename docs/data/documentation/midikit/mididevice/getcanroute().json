{"kind":"symbol","abstract":[{"type":"text","text":"Inherited from "},{"code":"MIDIIOObject.getCanRoute()","type":"codeVoice"},{"type":"text","text":"."}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"getCanRoute"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"}],"hierarchy":{"paths":[["doc:\/\/MIDIKit\/documentation\/MIDIKit","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO-Devices","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIDevice","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIDevice\/MIDIIOObject-Implementations"]]},"sections":[],"metadata":{"title":"getCanRoute()","role":"symbol","extendedModule":"MIDIKitIO","platforms":[],"modules":[{"name":"MIDIKit","relatedModules":["MIDIKitIO"]}],"roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getCanRoute"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"externalID":"s:9MIDIKitIO12MIDIIOObjectPAAE11getCanRouteSbyF::SYNTHESIZED::s:9MIDIKitIO10MIDIDeviceV","symbolKind":"method"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/midikit\/mididevice\/getcanroute()"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIDevice\/getCanRoute()"},"references":{"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO-Devices":{"kind":"article","abstract":[{"type":"text","text":"Devices represent physical devices that contain entity(ies) which in turn contain endpoint(s)."}],"type":"topic","role":"collectionGroup","title":"Working with Devices","url":"\/documentation\/midikit\/midikitio-devices","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO-Devices"},"doc://MIDIKit/documentation/MIDIKit":{"role":"collection","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit","kind":"symbol","abstract":[{"type":"text","text":"MIDIKit umbrella import that includes all MIDIKit modules."}],"type":"topic","title":"MIDIKit","url":"\/documentation\/midikit"},"doc://MIDIKit/documentation/MIDIKit/MIDIDevice":{"navigatorTitle":[{"text":"MIDIDevice","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A MIDI device, wrapping a Core MIDI "},{"code":"MIDIDeviceRef","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"A device can contain zero or more entities, and an entity can contain zero or more inputs","type":"text"},{"type":"text","text":" "},{"text":"and output endpoints.","type":"text"}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIDevice","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MIDIDevice"}],"title":"MIDIDevice","kind":"symbol","url":"\/documentation\/midikit\/mididevice","role":"symbol"},"doc://MIDIKit/documentation/MIDIKit/MIDIDevice/getCanRoute()":{"title":"getCanRoute()","abstract":[],"deprecated":true,"url":"\/documentation\/midikit\/mididevice\/getcanroute()","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIDevice\/getCanRoute()","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getCanRoute"},{"text":"() -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]},"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO":{"type":"topic","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO","title":"MIDIKitIO","kind":"article","role":"collectionGroup","abstract":[{"type":"text","text":"Core MIDI I\/O wrapper layer offering "},{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","isActive":true,"type":"reference"},{"type":"text","text":" class to create virtual ports and connect to existing ports in the system in order to send and receive MIDI events."}],"url":"\/documentation\/midikit\/midikitio"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager":{"title":"MIDIManager","type":"topic","navigatorTitle":[{"text":"MIDIManager","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","abstract":[{"type":"text","text":"Central MIDI Port and Connection Manager and MIDI system data provider."}],"url":"\/documentation\/midikit\/midimanager","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MIDIManager"}],"kind":"symbol"},"doc://MIDIKit/documentation/MIDIKit/MIDIDevice/MIDIIOObject-Implementations":{"abstract":[],"type":"topic","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIDevice\/MIDIIOObject-Implementations","role":"collectionGroup","kind":"article","url":"\/documentation\/midikit\/mididevice\/midiioobject-implementations","title":"MIDIIOObject Implementations"}}}