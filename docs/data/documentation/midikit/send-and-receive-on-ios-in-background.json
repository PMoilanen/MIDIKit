{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Background","level":2,"type":"heading","text":"Background"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, iOS places apps into a suspended state when they are backgrounded (user either switches to a different app, goes back to the home screen, or powers the screen off)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this state, sending and receiving MIDI events is also suspended."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Various workarounds are possible to keep a backgrounded app awake in order to process MIDI events."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guide describes one such workaround."}]},{"anchor":"Workaround","level":2,"type":"heading","text":"Workaround"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One suitable workaround is to generate null audio as background activity."}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Background Modes -> Audio, Airplay, and Picture in Picture"}]},{"type":"text","text":" app entitlement."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"background-modes-audio.png"}]},{"type":"orderedList","start":2,"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a background audio manager class:"}]},{"type":"codeListing","syntax":"swift","code":["import AVFoundation","","public final class BackgroundAudioManager {","    private var audioPlayer: AVPlayer","","    public init() {","        let playerItem = AVPlayerItem(url: URL(fileURLWithPath: \"\"))","        audioPlayer = AVPlayer(playerItem: playerItem)","        ","        do {","            try AVAudioSession.sharedInstance().setCategory(.playback, mode: .default, options: .mixWithOthers)","        } catch {","            print(\"Error initializing background audio player: \\(error)\")","        }","    }","    ","    private func setActive(_ state: Bool) {","        do {","            try AVAudioSession.sharedInstance().setActive(state)","        } catch {","            print(\"Error setting background audio state: \\(error)\")","        }","    }","    ","    public func start() {","        setActive(true)","        audioPlayer.play()","    }","    ","    public func stop() {","        audioPlayer.pause()","        setActive(false)","    }","}"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an instance of the class. Start background audio when your app transitions to the background and stop it when in the foreground."}]},{"anchor":"SwiftUI","level":4,"type":"heading","text":"SwiftUI"},{"type":"codeListing","syntax":"swift","code":["@main","struct MyApp: App {","    @Environment(\\.scenePhase) private var scenePhase","    private let backgroundAudioManager = BackgroundAudioManager()","    ","    var body: some Scene {","        WindowGroup {","            ContentView() \/\/ your main view","                .onChange(of: scenePhase) { phase in","                    switch phase {","                    case .active: \/\/ App is in the foreground","                        backgroundAudioManager.stop()","                    case .inactive: \/\/ App is transitioning between fore and back","                        break","                    case .background: \/\/ App is in the background","                        backgroundAudioManager.start()","                    @unknown default: \/\/ Handle any future unknown cases","                        break","                    }","                }","        }","    }","}"]},{"anchor":"UIKit-Using-Scenes","level":4,"type":"heading","text":"UIKit Using Scenes"},{"type":"codeListing","syntax":"swift","code":["class SceneDelegate: UIResponder, UIWindowSceneDelegate {","    private let backgroundAudioManager = BackgroundAudioManager()","","    func sceneDidBecomeActive(_ scene: UIScene) {","        backgroundAudioManager.stop()","    }","","    func sceneWillResignActive(_ scene: UIScene) {","        backgroundAudioManager.start()","    }","}"]},{"anchor":"UIKit-Without-Scenes","level":4,"type":"heading","text":"UIKit Without Scenes"},{"type":"codeListing","syntax":"swift","code":["@main","class AppDelegate: UIResponder, UIApplicationDelegate {","    private let backgroundAudioManager = BackgroundAudioManager()","    ","    func applicationDidBecomeActive(_ application: UIApplication) {","        backgroundAudioManager.stop()","    }","    ","    func applicationWillResignActive(_ application: UIApplication) {","        backgroundAudioManager.start()","    }","}"]}]}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/midikit\/send-and-receive-on-ios-in-background"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/Send-and-Receive-on-iOS-in-Background","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Keeping your iOS app alive while it is in the background to allow MIDI messages to be sent and received."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Send and Receive on iOS While Your App is Backgrounded","role":"article","modules":[{"name":"MIDIKit"}]},"hierarchy":{"paths":[["doc:\/\/MIDIKit\/documentation\/MIDIKit","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO"]]},"references":{"background-modes-audio.png":{"alt":"Background Modes","type":"image","identifier":"background-modes-audio.png","variants":[{"url":"\/images\/background-modes-audio.png","traits":["1x","light"]}]},"doc://MIDIKit/documentation/MIDIKit/MIDIManager":{"role":"symbol","title":"MIDIManager","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MIDIManager"}],"abstract":[{"type":"text","text":"Central MIDI Port and Connection Manager and MIDI system data provider."}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MIDIManager"}],"url":"\/documentation\/midikit\/midimanager"},"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO":{"role":"collectionGroup","title":"MIDIKitIO","abstract":[{"type":"text","text":"Core MIDI I\/O wrapper layer offering "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager"},{"type":"text","text":" class to create virtual ports and connect to existing ports in the system in order to send and receive MIDI events."}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO","kind":"article","type":"topic","url":"\/documentation\/midikit\/midikitio"},"doc://MIDIKit/documentation/MIDIKit":{"role":"collection","title":"MIDIKit","abstract":[{"type":"text","text":"MIDIKit umbrella import that includes all MIDIKit modules."}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit","kind":"symbol","type":"topic","url":"\/documentation\/midikit"}}}