{"kind":"article","variants":[{"paths":["\/documentation\/midikit\/send-and-receive-on-ios-in-background"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/Send-and-Receive-on-iOS-in-Background","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/MIDIKit\/documentation\/MIDIKit","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO"]]},"sections":[],"abstract":[{"text":"Keeping your iOS app alive while it is in the background to allow MIDI messages to be sent and received.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Context","anchor":"Context","level":2},{"inlineContent":[{"type":"text","text":"By default, iOS places apps into a suspended state when they are backgrounded (user either switches to a different app, goes back to the home screen, or powers the screen off)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In this state, sending and receiving MIDI events is also suspended.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In order to have a good chance of passing App Store review, an entitlement needs to be added for a reason and not purely as a workaround."}],"type":"paragraph"},{"text":"Producing Audio While in Background","type":"heading","anchor":"Producing-Audio-While-in-Background","level":2},{"type":"paragraph","inlineContent":[{"text":"If the application generates audio in response to receiving MIDI, you may add a background mode to allow audio playback which will keep the app (and the MIDI runloop) alive.","type":"text"}]},{"inlineContent":[{"type":"text","text":"However be aware that an audio stream must be playing to keep the app alive. The Apple docs state:"}],"type":"paragraph"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As long as [the app] is playing audio or video content or recording audio content, the app continues to run in the background. However, if recording or playback stops, the system suspends the app."}]}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Add the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Background Modes -> Audio, Airplay, and Picture in Picture"}]},{"text":" app entitlement.","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"background-modes-audio.png"}]},{"type":"orderedList","start":2,"items":[{"content":[{"inlineContent":[{"text":"Use AVFoundation to set up the appâ€™s audio session.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["try AVAudioSession.sharedInstance()","    .setCategory(.playback, mode: .default, options: .mixWithOthers)"],"type":"codeListing"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Set the session as active either once at app startup, or dynamically make it active when the app is backgrounded (and inactive when the app is foregrounded).","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"An example implementation where a silent audio stream is played while the app is backgrounded, allowing for additional audio to play at any time as well:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import AVFoundation","","public final class BackgroundAudioManager {","    private var audioPlayer: AVPlayer","","    public init() {","        let playerItem = AVPlayerItem(url: URL(fileURLWithPath: \"\")) \/\/ empty audio","        audioPlayer = AVPlayer(playerItem: playerItem)","","        do {","            try AVAudioSession.sharedInstance()","                .setCategory(.playback, mode: .default, options: .mixWithOthers)","        } catch {","            print(\"Error setting up background audio session: \\(error)\")","        }","    }","","    private func setActive(_ state: Bool) {","        do {","            try AVAudioSession.sharedInstance().setActive(state)","        } catch {","            print(\"Error setting background audio state: \\(error)\")","        }","    }","","    public func start() {","        setActive(true)","        audioPlayer.play()","    }","","    public func stop() {","        audioPlayer.pause()","        setActive(false)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Start background audio when your app transitions to the background and stop it when in the foreground."}]},{"anchor":"SwiftUI","type":"heading","text":"SwiftUI","level":4},{"code":["@main","struct MyApp: App {","    @Environment(\\.scenePhase) private var scenePhase","    private let backgroundAudioManager = BackgroundAudioManager()","    ","    var body: some Scene {","        WindowGroup {","            ContentView() \/\/ your main view","                .onChange(of: scenePhase) { phase in","                    switch phase {","                    case .active: \/\/ App is in the foreground","                        backgroundAudioManager.stop()","                    case .inactive: \/\/ App is transitioning between fore and back","                        break","                    case .background: \/\/ App is in the background","                        backgroundAudioManager.start()","                    @unknown default: \/\/ Handle any future unknown cases","                        break","                    }","                }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"UIKit-Using-Scenes","level":4,"text":"UIKit Using Scenes"},{"type":"codeListing","code":["class SceneDelegate: UIResponder, UIWindowSceneDelegate {","    private let backgroundAudioManager = BackgroundAudioManager()","","    func sceneDidBecomeActive(_ scene: UIScene) {","        backgroundAudioManager.stop()","    }","","    func sceneWillResignActive(_ scene: UIScene) {","        backgroundAudioManager.start()","    }","}"],"syntax":"swift"},{"type":"heading","text":"UIKit Without Scenes","level":4,"anchor":"UIKit-Without-Scenes"},{"type":"codeListing","syntax":"swift","code":["@main","class AppDelegate: UIResponder, UIApplicationDelegate {","    private let backgroundAudioManager = BackgroundAudioManager()","    ","    func applicationDidBecomeActive(_ application: UIApplication) {","        backgroundAudioManager.stop()","    }","    ","    func applicationWillResignActive(_ application: UIApplication) {","        backgroundAudioManager.start()","    }","}"]}]}]}]}],"metadata":{"title":"Send and Receive on iOS While Your App is Backgrounded","roleHeading":"Article","role":"article","modules":[{"name":"MIDIKit"}]},"references":{"doc://MIDIKit/documentation/MIDIKit":{"role":"collection","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit","kind":"symbol","abstract":[{"type":"text","text":"MIDIKit umbrella import that includes all MIDIKit modules."}],"type":"topic","title":"MIDIKit","url":"\/documentation\/midikit"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager":{"title":"MIDIManager","type":"topic","navigatorTitle":[{"text":"MIDIManager","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","abstract":[{"type":"text","text":"Central MIDI Port and Connection Manager and MIDI system data provider."}],"url":"\/documentation\/midikit\/midimanager","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MIDIManager"}],"kind":"symbol"},"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO":{"type":"topic","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO","title":"MIDIKitIO","kind":"article","role":"collectionGroup","abstract":[{"type":"text","text":"Core MIDI I\/O wrapper layer offering "},{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","isActive":true,"type":"reference"},{"type":"text","text":" class to create virtual ports and connect to existing ports in the system in order to send and receive MIDI events."}],"url":"\/documentation\/midikit\/midikitio"},"background-modes-audio.png":{"type":"image","alt":"Background Modes","identifier":"background-modes-audio.png","variants":[{"url":"\/images\/background-modes-audio.png","traits":["1x","light"]}]}}}