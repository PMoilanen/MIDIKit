{"hierarchy":{"paths":[["doc:\/\/MIDIKit\/documentation\/MIDIKit","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO"]]},"metadata":{"role":"article","modules":[{"name":"MIDIKit"}],"roleHeading":"Article","title":"Send and Receive on iOS While Your App is Backgrounded"},"kind":"article","abstract":[{"type":"text","text":"Keeping your iOS app alive while it is in the background to allow MIDI messages to be sent and received."}],"sections":[],"primaryContentSections":[{"content":[{"anchor":"Context","text":"Context","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, iOS places apps into a suspended state when they are backgrounded (user either switches to a different app, goes back to the home screen, or powers the screen off)."}]},{"inlineContent":[{"type":"text","text":"In this state, sending and receiving MIDI events is also suspended."}],"type":"paragraph"},{"inlineContent":[{"text":"In order to have a good chance of passing App Store review, an entitlement needs to be added for a reason and not purely as a workaround.","type":"text"}],"type":"paragraph"},{"text":"Producing Audio While in Background","type":"heading","level":2,"anchor":"Producing-Audio-While-in-Background"},{"type":"paragraph","inlineContent":[{"text":"If the application generates audio in response to receiving MIDI, you may add a background mode to allow audio playback which will keep the app (and the MIDI runloop) alive.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However be aware that an audio stream must be playing to keep the app alive. The Apple docs state:"}]},{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"As long as [the app] is playing audio or video content or recording audio content, the app continues to run in the background. However, if recording or playback stops, the system suspends the app.","type":"text"}]}],"type":"aside"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the "},{"type":"emphasis","inlineContent":[{"text":"Background Modes -> Audio, Airplay, and Picture in Picture","type":"text"}]},{"text":" app entitlement.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"identifier":"background-modes-audio.png","type":"image"}]},{"start":2,"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Use AVFoundation to set up the appâ€™s audio session."}],"type":"paragraph"},{"code":["try AVAudioSession.sharedInstance()","    .setCategory(.playback, mode: .default, options: .mixWithOthers)"],"syntax":"swift","type":"codeListing"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Set the session as active either once at app startup, or dynamically make it active when the app is backgrounded (and inactive when the app is foregrounded).","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"An example implementation where a silent audio stream is played while the app is backgrounded, allowing for additional audio to play at any time as well:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["import AVFoundation","","public final class BackgroundAudioManager {","    private var audioPlayer: AVPlayer","","    public init() {","        let playerItem = AVPlayerItem(url: URL(fileURLWithPath: \"\")) \/\/ empty audio","        audioPlayer = AVPlayer(playerItem: playerItem)","","        do {","            try AVAudioSession.sharedInstance()","                .setCategory(.playback, mode: .default, options: .mixWithOthers)","        } catch {","            print(\"Error setting up background audio session: \\(error)\")","        }","    }","","    private func setActive(_ state: Bool) {","        do {","            try AVAudioSession.sharedInstance().setActive(state)","        } catch {","            print(\"Error setting background audio state: \\(error)\")","        }","    }","","    public func start() {","        setActive(true)","        audioPlayer.play()","    }","","    public func stop() {","        audioPlayer.pause()","        setActive(false)","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Start background audio when your app transitions to the background and stop it when in the foreground.","type":"text"}]},{"type":"heading","anchor":"SwiftUI","text":"SwiftUI","level":4},{"type":"codeListing","syntax":"swift","code":["@main","struct MyApp: App {","    @Environment(\\.scenePhase) private var scenePhase","    private let backgroundAudioManager = BackgroundAudioManager()","    ","    var body: some Scene {","        WindowGroup {","            ContentView() \/\/ your main view","                .onChange(of: scenePhase) { phase in","                    switch phase {","                    case .active: \/\/ App is in the foreground","                        backgroundAudioManager.stop()","                    case .inactive: \/\/ App is transitioning between fore and back","                        break","                    case .background: \/\/ App is in the background","                        backgroundAudioManager.start()","                    @unknown default: \/\/ Handle any future unknown cases","                        break","                    }","                }","        }","    }","}"]},{"anchor":"UIKit-Using-Scenes","text":"UIKit Using Scenes","level":4,"type":"heading"},{"syntax":"swift","code":["class SceneDelegate: UIResponder, UIWindowSceneDelegate {","    private let backgroundAudioManager = BackgroundAudioManager()","","    func sceneDidBecomeActive(_ scene: UIScene) {","        backgroundAudioManager.stop()","    }","","    func sceneWillResignActive(_ scene: UIScene) {","        backgroundAudioManager.start()","    }","}"],"type":"codeListing"},{"text":"UIKit Without Scenes","type":"heading","level":4,"anchor":"UIKit-Without-Scenes"},{"syntax":"swift","code":["@main","class AppDelegate: UIResponder, UIApplicationDelegate {","    private let backgroundAudioManager = BackgroundAudioManager()","    ","    func applicationDidBecomeActive(_ application: UIApplication) {","        backgroundAudioManager.stop()","    }","    ","    func applicationWillResignActive(_ application: UIApplication) {","        backgroundAudioManager.start()","    }","}"],"type":"codeListing"}]}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/midikit\/send-and-receive-on-ios-in-background"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/Send-and-Receive-on-iOS-in-Background","interfaceLanguage":"swift"},"references":{"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO":{"url":"\/documentation\/midikit\/midikitio","title":"MIDIKitIO","type":"topic","abstract":[{"text":"Core MIDI I\/O wrapper layer offering ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager"},{"type":"text","text":" class to create virtual ports and connect to existing ports in the system in order to send and receive MIDI events."}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO","role":"collectionGroup","kind":"article"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager":{"kind":"symbol","abstract":[{"type":"text","text":"Central MIDI Port and Connection Manager and MIDI system data provider."}],"url":"\/documentation\/midikit\/midimanager","title":"MIDIManager","role":"symbol","navigatorTitle":[{"text":"MIDIManager","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MIDIManager"}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager"},"background-modes-audio.png":{"alt":"Background Modes","variants":[{"traits":["1x","light"],"url":"\/images\/background-modes-audio.png"}],"identifier":"background-modes-audio.png","type":"image"},"doc://MIDIKit/documentation/MIDIKit":{"kind":"symbol","type":"topic","url":"\/documentation\/midikit","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit","abstract":[{"type":"text","text":"MIDIKit umbrella import that includes all MIDIKit modules."}],"title":"MIDIKit","role":"collection"}}}