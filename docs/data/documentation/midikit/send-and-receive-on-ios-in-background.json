{"sections":[],"hierarchy":{"paths":[["doc:\/\/MIDIKit\/documentation\/MIDIKit","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO"]]},"primaryContentSections":[{"content":[{"type":"heading","text":"Context","anchor":"Context","level":2},{"inlineContent":[{"type":"text","text":"By default, iOS places apps into a suspended state when they are backgrounded (user either switches to a different app, goes back to the home screen, or powers the screen off)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In this state, sending and receiving MIDI events is also suspended.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In order to have a good chance of passing App Store review, an entitlement needs to be added for a reason and not purely as a workaround.","type":"text"}]},{"anchor":"Producing-Audio-While-in-Background","type":"heading","text":"Producing Audio While in Background","level":2},{"inlineContent":[{"type":"text","text":"If the application generates audio in response to receiving MIDI, you may add a background mode to allow audio playback which will keep the app (and the MIDI runloop) alive."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However be aware that an audio stream must be playing to keep the app alive. The Apple docs state:"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As long as [the app] is playing audio or video content or recording audio content, the app continues to run in the background. However, if recording or playback stops, the system suspends the app."}]}],"style":"note","name":"Note"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Add the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Background Modes -> Audio, Airplay, and Picture in Picture"}]},{"text":" app entitlement.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"background-modes-audio.png"}]},{"type":"orderedList","start":2,"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use AVFoundation to set up the appâ€™s audio session."}]},{"syntax":"swift","code":["try AVAudioSession.sharedInstance()","    .setCategory(.playback, mode: .default, options: .mixWithOthers)"],"type":"codeListing"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Set the session as active either once at app startup, or dynamically make it active when the app is backgrounded (and inactive when the app is foregrounded).","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"An example implementation where a silent audio stream is played while the app is backgrounded, allowing for additional audio to play at any time as well:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["import AVFoundation","","public final class BackgroundAudioManager {","    private var audioPlayer: AVPlayer","","    public init() {","        let playerItem = AVPlayerItem(url: URL(fileURLWithPath: \"\")) \/\/ empty audio","        audioPlayer = AVPlayer(playerItem: playerItem)","","        do {","            try AVAudioSession.sharedInstance()","                .setCategory(.playback, mode: .default, options: .mixWithOthers)","        } catch {","            print(\"Error setting up background audio session: \\(error)\")","        }","    }","","    private func setActive(_ state: Bool) {","        do {","            try AVAudioSession.sharedInstance().setActive(state)","        } catch {","            print(\"Error setting background audio state: \\(error)\")","        }","    }","","    public func start() {","        setActive(true)","        audioPlayer.play()","    }","","    public func stop() {","        audioPlayer.pause()","        setActive(false)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Start background audio when your app transitions to the background and stop it when in the foreground."}]},{"type":"heading","text":"SwiftUI","level":4,"anchor":"SwiftUI"},{"syntax":"swift","code":["@main","struct MyApp: App {","    @Environment(\\.scenePhase) private var scenePhase","    private let backgroundAudioManager = BackgroundAudioManager()","    ","    var body: some Scene {","        WindowGroup {","            ContentView() \/\/ your main view","                .onChange(of: scenePhase) { phase in","                    switch phase {","                    case .active: \/\/ App is in the foreground","                        backgroundAudioManager.stop()","                    case .inactive: \/\/ App is transitioning between fore and back","                        break","                    case .background: \/\/ App is in the background","                        backgroundAudioManager.start()","                    @unknown default: \/\/ Handle any future unknown cases","                        break","                    }","                }","        }","    }","}"],"type":"codeListing"},{"type":"heading","level":4,"text":"UIKit Using Scenes","anchor":"UIKit-Using-Scenes"},{"type":"codeListing","code":["class SceneDelegate: UIResponder, UIWindowSceneDelegate {","    private let backgroundAudioManager = BackgroundAudioManager()","","    func sceneDidBecomeActive(_ scene: UIScene) {","        backgroundAudioManager.stop()","    }","","    func sceneWillResignActive(_ scene: UIScene) {","        backgroundAudioManager.start()","    }","}"],"syntax":"swift"},{"text":"UIKit Without Scenes","type":"heading","anchor":"UIKit-Without-Scenes","level":4},{"type":"codeListing","syntax":"swift","code":["@main","class AppDelegate: UIResponder, UIApplicationDelegate {","    private let backgroundAudioManager = BackgroundAudioManager()","    ","    func applicationDidBecomeActive(_ application: UIApplication) {","        backgroundAudioManager.stop()","    }","    ","    func applicationWillResignActive(_ application: UIApplication) {","        backgroundAudioManager.start()","    }","}"]}]}]}],"kind":"content"}],"metadata":{"title":"Send and Receive on iOS While Your App is Backgrounded","modules":[{"name":"MIDIKit"}],"roleHeading":"Article","role":"article"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/midikit\/send-and-receive-on-ios-in-background"]}],"identifier":{"url":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/Send-and-Receive-on-iOS-in-Background","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","abstract":[{"type":"text","text":"Keeping your iOS app alive while it is in the background to allow MIDI messages to be sent and received."}],"references":{"background-modes-audio.png":{"alt":"Background Modes","type":"image","identifier":"background-modes-audio.png","variants":[{"url":"\/images\/background-modes-audio.png","traits":["1x","light"]}]},"doc://MIDIKit/documentation/MIDIKit":{"url":"\/documentation\/midikit","title":"MIDIKit","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit","kind":"symbol","abstract":[{"text":"MIDIKit umbrella import that includes all MIDIKit modules.","type":"text"}],"type":"topic","role":"collection"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager":{"navigatorTitle":[{"text":"MIDIManager","kind":"identifier"}],"title":"MIDIManager","kind":"symbol","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","url":"\/documentation\/midikit\/midimanager","abstract":[{"type":"text","text":"Central MIDI Port and Connection Manager and MIDI system data provider."}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MIDIManager","kind":"identifier"}]},"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO":{"title":"MIDIKitIO","url":"\/documentation\/midikit\/midikitio","kind":"article","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO","abstract":[{"type":"text","text":"Core MIDI I\/O wrapper layer offering "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager"},{"type":"text","text":" class to create virtual ports and connect to existing ports in the system in order to send and receive MIDI events."}],"type":"topic","role":"collectionGroup"}}}