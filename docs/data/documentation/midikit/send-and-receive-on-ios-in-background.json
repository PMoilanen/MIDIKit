{"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Context","type":"heading","anchor":"Context"},{"inlineContent":[{"text":"By default, iOS places apps into a suspended state when they are backgrounded (user either switches to a different app, goes back to the home screen, or powers the screen off).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In this state, sending and receiving MIDI events is also suspended.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In order to have a good chance of passing App Store review, an entitlement needs to be added for a reason and not purely as a workaround."}],"type":"paragraph"},{"anchor":"Producing-Audio-While-in-Background","text":"Producing Audio While in Background","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If the application generates audio in response to receiving MIDI, you may add a background mode to allow audio playback which will keep the app (and the MIDI runloop) alive.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However be aware that an audio stream must be playing to keep the app alive. The Apple docs state:"}]},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"text":"As long as [the app] is playing audio or video content or recording audio content, the app continues to run in the background. However, if recording or playback stops, the system suspends the app.","type":"text"}],"type":"paragraph"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Add the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Background Modes -> Audio, Airplay, and Picture in Picture"}]},{"text":" app entitlement.","type":"text"}]}]}],"type":"orderedList"},{"inlineContent":[{"identifier":"background-modes-audio.png","type":"image"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Use AVFoundation to set up the appâ€™s audio session.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["try AVAudioSession.sharedInstance()","    .setCategory(.playback, mode: .default, options: .mixWithOthers)"]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Set the session as active either once at app startup, or dynamically make it active when the app is backgrounded (and inactive when the app is foregrounded).","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An example implementation where a silent audio stream is played while the app is backgrounded, allowing for additional audio to play at any time as well:"}]},{"type":"codeListing","code":["import AVFoundation","","public final class BackgroundAudioManager {","    private var audioPlayer: AVPlayer","","    public init() {","        let playerItem = AVPlayerItem(url: URL(fileURLWithPath: \"\")) \/\/ empty audio","        audioPlayer = AVPlayer(playerItem: playerItem)","","        do {","            try AVAudioSession.sharedInstance()","                .setCategory(.playback, mode: .default, options: .mixWithOthers)","        } catch {","            print(\"Error setting up background audio session: \\(error)\")","        }","    }","","    private func setActive(_ state: Bool) {","        do {","            try AVAudioSession.sharedInstance().setActive(state)","        } catch {","            print(\"Error setting background audio state: \\(error)\")","        }","    }","","    public func start() {","        setActive(true)","        audioPlayer.play()","    }","","    public func stop() {","        audioPlayer.pause()","        setActive(false)","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"Start background audio when your app transitions to the background and stop it when in the foreground.","type":"text"}],"type":"paragraph"},{"type":"heading","level":4,"text":"SwiftUI","anchor":"SwiftUI"},{"type":"codeListing","syntax":"swift","code":["@main","struct MyApp: App {","    @Environment(\\.scenePhase) private var scenePhase","    private let backgroundAudioManager = BackgroundAudioManager()","    ","    var body: some Scene {","        WindowGroup {","            ContentView() \/\/ your main view","                .onChange(of: scenePhase) { phase in","                    switch phase {","                    case .active: \/\/ App is in the foreground","                        backgroundAudioManager.stop()","                    case .inactive: \/\/ App is transitioning between fore and back","                        break","                    case .background: \/\/ App is in the background","                        backgroundAudioManager.start()","                    @unknown default: \/\/ Handle any future unknown cases","                        break","                    }","                }","        }","    }","}"]},{"level":4,"anchor":"UIKit-Using-Scenes","text":"UIKit Using Scenes","type":"heading"},{"code":["class SceneDelegate: UIResponder, UIWindowSceneDelegate {","    private let backgroundAudioManager = BackgroundAudioManager()","","    func sceneDidBecomeActive(_ scene: UIScene) {","        backgroundAudioManager.stop()","    }","","    func sceneWillResignActive(_ scene: UIScene) {","        backgroundAudioManager.start()","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"heading","anchor":"UIKit-Without-Scenes","text":"UIKit Without Scenes","level":4},{"type":"codeListing","code":["@main","class AppDelegate: UIResponder, UIApplicationDelegate {","    private let backgroundAudioManager = BackgroundAudioManager()","    ","    func applicationDidBecomeActive(_ application: UIApplication) {","        backgroundAudioManager.stop()","    }","    ","    func applicationWillResignActive(_ application: UIApplication) {","        backgroundAudioManager.start()","    }","}"],"syntax":"swift"}]}],"type":"orderedList","start":2}]}],"metadata":{"title":"Send and Receive on iOS While Your App is Backgrounded","role":"article","modules":[{"name":"MIDIKit"}],"roleHeading":"Article"},"sections":[],"identifier":{"url":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/Send-and-Receive-on-iOS-in-Background","interfaceLanguage":"swift"},"kind":"article","hierarchy":{"paths":[["doc:\/\/MIDIKit\/documentation\/MIDIKit","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/midikit\/send-and-receive-on-ios-in-background"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Keeping your iOS app alive while it is in the background to allow MIDI messages to be sent and received."}],"references":{"doc://MIDIKit/documentation/MIDIKit/MIDIManager":{"title":"MIDIManager","role":"symbol","kind":"symbol","abstract":[{"text":"Central MIDI Port and Connection Manager and MIDI system data provider.","type":"text"}],"url":"\/documentation\/midikit\/midimanager","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MIDIManager"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"MIDIManager","kind":"identifier"}]},"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO":{"title":"MIDIKitIO","role":"collectionGroup","abstract":[{"text":"Core MIDI I\/O wrapper layer offering ","type":"text"},{"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","isActive":true},{"type":"text","text":" class to create virtual ports and connect to existing ports in the system in order to send and receive MIDI events."}],"url":"\/documentation\/midikit\/midikitio","kind":"article","type":"topic","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO"},"background-modes-audio.png":{"alt":"Background Modes","type":"image","identifier":"background-modes-audio.png","variants":[{"traits":["1x","light"],"url":"\/images\/background-modes-audio.png"}]},"doc://MIDIKit/documentation/MIDIKit":{"url":"\/documentation\/midikit","type":"topic","abstract":[{"type":"text","text":"MIDIKit umbrella import that includes all MIDIKit modules."}],"kind":"symbol","role":"collection","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit","title":"MIDIKit"}}}