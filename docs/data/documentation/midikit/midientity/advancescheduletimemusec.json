{"hierarchy":{"paths":[["doc:\/\/MIDIKit\/documentation\/MIDIKit","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO-Devices","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIEntity","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIEntity\/MIDIIOObject-Implementations"]]},"sections":[],"metadata":{"roleHeading":"Instance Property","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"advanceScheduleTimeMuSec","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?"}],"extendedModule":"MIDIKitIO","title":"advanceScheduleTimeMuSec","symbolKind":"property","modules":[{"relatedModules":["MIDIKitIO"],"name":"MIDIKit"}],"externalID":"s:9MIDIKitIO12MIDIIOObjectPAAE24advanceScheduleTimeMuSecSSSgvp::SYNTHESIZED::s:9MIDIKitIO10MIDIEntityV","role":"symbol"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"advanceScheduleTimeMuSec","kind":"identifier"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":"? { "},{"text":"get","kind":"keyword"},{"kind":"text","text":" }"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Only the driver that owns the object may set this property."}]},{"inlineContent":[{"type":"text","text":"If this property value is nonzero, clients should treat the value as a minimum. For devices"},{"type":"text","text":" "},{"type":"text","text":"with a nonzero advance schedule time, drivers receive outgoing messages to the device at the"},{"text":" ","type":"text"},{"type":"text","text":"time the client sends them using "},{"type":"codeVoice","code":"MIDISend(_:_:_:)"},{"type":"text","text":". The driver is responsible for"},{"text":" ","type":"text"},{"text":"scheduling events to play at the right times, according to their timestamps.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can also set this property on any virtual destinations you create. When clients send","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"messages to a virtual destination with an advance schedule time of 0, the destination"},{"type":"text","text":" "},{"type":"text","text":"receives the messages at the scheduled delivery time. If a virtual destination has a nonzero"},{"text":" ","type":"text"},{"text":"advance schedule time, it receives timestamped messages as soon as theyâ€™re sent, and must do","type":"text"},{"text":" ","type":"text"},{"text":"its own internal scheduling of events it receives.","type":"text"}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Recommended number of microseconds in advance that clients should schedule output."},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"kMIDIPropertyAdvanceScheduleTimeMuSec"},{"type":"text","text":")"}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIEntity\/advanceScheduleTimeMuSec"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/midikit\/midientity\/advancescheduletimemusec"]}],"references":{"doc://MIDIKit/documentation/MIDIKit/MIDIEntity/advanceScheduleTimeMuSec":{"abstract":[{"text":"Recommended number of microseconds in advance that clients should schedule output.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"("},{"type":"codeVoice","code":"kMIDIPropertyAdvanceScheduleTimeMuSec"},{"text":")","type":"text"}],"kind":"symbol","title":"advanceScheduleTimeMuSec","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIEntity\/advanceScheduleTimeMuSec","url":"\/documentation\/midikit\/midientity\/advancescheduletimemusec","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"advanceScheduleTimeMuSec"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":"?"}]},"doc://MIDIKit/documentation/MIDIKit":{"url":"\/documentation\/midikit","title":"MIDIKit","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit","kind":"symbol","abstract":[{"text":"MIDIKit umbrella import that includes all MIDIKit modules.","type":"text"}],"type":"topic","role":"collection"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager":{"navigatorTitle":[{"text":"MIDIManager","kind":"identifier"}],"title":"MIDIManager","kind":"symbol","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","url":"\/documentation\/midikit\/midimanager","abstract":[{"type":"text","text":"Central MIDI Port and Connection Manager and MIDI system data provider."}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MIDIManager","kind":"identifier"}]},"doc://MIDIKit/documentation/MIDIKit/MIDIEntity":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MIDIEntity"}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIEntity","type":"topic","title":"MIDIEntity","abstract":[{"type":"text","text":"A MIDI device, wrapping a Core MIDI "},{"type":"codeVoice","code":"MIDIEntityRef"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"A device can contain zero or more entities, and an entity can contain zero or more inputs"},{"type":"text","text":" "},{"type":"text","text":"and output endpoints."}],"navigatorTitle":[{"text":"MIDIEntity","kind":"identifier"}],"url":"\/documentation\/midikit\/midientity","kind":"symbol","role":"symbol"},"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO-Devices":{"type":"topic","kind":"article","role":"collectionGroup","abstract":[{"type":"text","text":"Devices represent physical devices that contain entity(ies) which in turn contain endpoint(s)."}],"title":"Working with Devices","url":"\/documentation\/midikit\/midikitio-devices","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO-Devices"},"doc://MIDIKit/documentation/MIDIKit/MIDIEntity/MIDIIOObject-Implementations":{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIEntity\/MIDIIOObject-Implementations","type":"topic","abstract":[],"title":"MIDIIOObject Implementations","url":"\/documentation\/midikit\/midientity\/midiioobject-implementations","kind":"article","role":"collectionGroup"},"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO":{"title":"MIDIKitIO","url":"\/documentation\/midikit\/midikitio","kind":"article","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO","abstract":[{"type":"text","text":"Core MIDI I\/O wrapper layer offering "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager"},{"type":"text","text":" class to create virtual ports and connect to existing ports in the system in order to send and receive MIDI events."}],"type":"topic","role":"collectionGroup"}}}